trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  GOOS: 'linux'
  GOARCH: 'amd64'
  imagePullSecret: 'secret'
  acrname: 'myacrchabbi'
  aksname: 'clusterchabbi'
  dockerregistry: 'akschabbi97'
  kubernetesserviceconnection: 'kubechabbi'
  azureserviceconnection: 'serviceconnection1'
  azureresourcegroup: 'akschabbi'
  azureSubscriptionid: '8fdfcd42-cb6a-4f09-bd1d-984a332c84b1'



steps:

- task: AzureKeyVault@2
  inputs:
    azureSubscription: 'serviceconnection1'
    KeyVaultName: 'keyvault-chabbi'
    SecretsFilter: 'Clientid,Clientsecret'
    RunAsPreJob: true

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      echo "Setting environment variables..."
      echo "export ARM_CLIENT_ID=$(Clientid)" >> $(Pipeline.Workspace)/env-vars 
      echo "export ARM_CLIENT_SECRET=$(Clientsecret)" >> $(Pipeline.Workspace)/env-vars
  displayName: 'Set environment variables'

- task: TerraformCLI@0
  displayName: 'check terraform version'
  inputs:
    command: version

- task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
  displayName: ‘Install Terraform latest’
  inputs:
    terraformVersion: latest

- task: TerraformTaskV4@4
  inputs:
     provider: 'azurerm'
     command: 'init'
     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
     backendServiceArm: 'serviceconnection1'
     backendAzureRmSubscriptionId: $(azureSubscriptionid)
     backendAzureRmResourceGroupLocation: 'westeurope'
     backendAzureRmResourceGroupName: 'stgchabbi'
     backendAzureRmStorageAccountName: 'stgchabbi1'
     backendAzureRmContainerName: 'tfcontainer'
     backendAzureRmKey: 'tf/terraform.tfstate'
     StorageContainerName: 'tfcontainer'
  displayName: 'Terraform Init'

- task: TerraformTaskV4@4
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    commandOptions: '-out=tfplan'
    environmentServiceNameAzureRM: 'serviceconnection1'
  displayName: 'Terraform Plan'

- task: TerraformTaskV4@4
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    commandOptions: '-auto-approve'
    environmentServiceNameAzureRM: 'serviceconnection1'
  displayName: 'Terraform Apply'


- task: GoTool@0
  inputs:
    version: '1.19'
- task: Go@0
  inputs:
    command: 'get'
    arguments: '-d'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
- task: Go@0
  inputs:
    command: 'build'
    arguments: '-o $(Build.BinariesDirectory) '
    workingDirectory: '$(System.DefaultWorkingDirectory)'

- task: CopyFiles@2
  inputs:
    Contents: |
      $(System.DefaultWorkingDirectory)/manifest/deployment.yml
      $(System.DefaultWorkingDirectory)/manifest/service.yml
    TargetFolder: '$(Pipeline.Workspace)/s/manifest'

- task: Docker@2
  displayName: Build Docker image
  inputs:
    containerRegistry: $(dockerregistry)
    repository: '$(acrname)/http-echo'
    command: 'build'
    Dockerfile: 'Dockerfile'
    buildContext: '$(System.DefaultWorkingDirectory)'
    tags: |
      $(Build.BuildId)
      latest


- task: Docker@2
  displayName: Push Docker image to ACR
  inputs:
    containerRegistry: $(dockerregistry)
    repository: '$(acrname)/http-echo'
    command: 'push'
    Dockerfile: 'Dockerfile'
    tags: |
      $(Build.BuildId)
      latest

- task: KubernetesManifest@0
  displayName: Create imagePullSecret
  inputs:
    action: createSecret
    secretName: $(imagePullSecret)
    dockerRegistryEndpoint: $(dockerregistry)
    kubernetesServiceConnection: $(kubernetesserviceconnection)
    namespace: 'default'

- script: |
   envsubst < $(Pipeline.Workspace)/s/manifest/deployment.yml.template >  $(Pipeline.Workspace)/s/manifest/deployment.yml
  displayName: 'Script task'

- task: KubernetesManifest@0
  displayName: Delete Kubernetes cluster
  inputs:
    action: delete
    kubernetesServiceConnection: '$(kubernetesserviceconnection)'
    namespace: 'default'
    rolloutStatusTimeout: 5
    arguments: deployment web

- task: KubernetesManifest@0
  displayName: Deploy to Kubernetes cluster
  inputs:
    action: deploy
    kubernetesServiceConnection: '$(kubernetesserviceconnection)'
    namespace: 'default'
    rolloutStatusTimeout: 5
    manifests: |
      $(Pipeline.Workspace)/s/manifest/deployment.yml
      $(Pipeline.Workspace)/s/manifest/service.yml
    imagePullSecrets: |
      $(imagePullSecret)
    containers: |
      $(acrname)/http-echo:$(Build.BuildId)


- task: HelmInstaller@1
  inputs:
    helmVersionToInstall: 'latest'
    checkLatestVersion: true

- task: AzureCLI@2
  inputs:
    azureSubscription: $(azureserviceconnection)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az aks get-credentials --resource-group $(azureresourcegroup) --name $(aksname)
      helm repo add haproxytech https://haproxytech.github.io/helm-charts
      helm repo update
      helm upgrade --install kubernetes-ingress haproxytech/kubernetes-ingress --create-namespace --namespace haproxy-controller --set controller.service.type=LoadBalancer
  displayName: Deploy HA-Proxy-ingress

- task: Kubernetes@1
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscriptionEndpoint: $(azureserviceconnection)
    azureResourceGroup: $(azureresourcegroup)
    kubernetesCluster: $(aksname)
    kubernetesServiceEndpoint: $(kubernetesserviceconnection)
    command: 'get'
    arguments: 'services --namespace haproxy-controller kubernetes-ingress'
    outputFormat: jsonpath={.status.loadBalancer.ingress[0].ip} ##show the external ip in a proper way
  displayName: 'Get external IP'
  name: GetExternalIP


- task: Bash@3
  inputs: 
    targetType: 'inline'
    script: |
      curl -v http://${GETEXTERNALIP_KUBECTLOUTPUT}
  displayName: 'Curl Test'

- task: PublishBuildArtifacts@1
  inputs:
     artifactName: drop